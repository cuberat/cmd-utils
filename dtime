#!/usr/local/bin/perl

# Copyright (c) 2015 Don Owens <don@regexguy.com>.  All rights reserved.
#
# This software is released under the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
#  * Neither the name of the author nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

# Time utilities, e.g., convert from unix time to local ISO timestamp

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case bundling);

use Time::Local;

our $VERSION = '0.1';

# main
{
    my $self = bless { };

    my $opts = $self->get_options([ "help|h",
                                    "version|V",
                                    "self_install|selfinstall|self-install",
                                    "prefix|install-prefix=s",
                                    "bindir|install-bindir=s",
                                    "reverse|r",
                                    "unix|u",
                                  ], { });
    $self->check_options($opts, [ ]); # die's on bad options

    if ($opts->{version}) {
        print STDERR $self->get_full_version;
        exit 0;
    }

    if ($opts->{self_install}) {
        $self->self_install($opts->{prefix}, $opts->{bindir});
        exit 0;
    }

    unless (@ARGV) {
        if ($opts->{unix}) {
            printf "%d\n", time();
        }
        else {
            my ($ts, $wday) = $self->unix_to_local(time());
            printf "%s (%s)\n", $ts, $wday;
        }
        exit 0;
    }

    if ($opts->{reverse}) {
        foreach my $arg (@ARGV) {
            my ($ts, $wday) = $self->unix_to_local($arg);
            printf "%s (%s)\n", $ts, $wday;
        }
    }
    else {
        foreach my $arg (@ARGV) {
            my $ts = $self->local_to_unix($arg);
            printf "%d\n", $ts;
        }
    }
}

exit 0;

###############################################################################
# Subroutines

sub unix_to_local {
    my ($self, $ts_in) = @_;
    my $re = qr/\d+/;

    unless ($ts_in =~ /($re)/) {
        warn "'$ts_in' not in format $re";
    }

    my ($sec, $min, $hour, $mday, $mon, $year, $wday) = localtime($ts_in);
    $mon++;
    $year += 1900 if $year < 1900;

    my $ts = sprintf "%04d-%02d-%02d %02d:%02d:%02d", $year, $mon,
        $mday, $hour, $min, $sec;
    my $day = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
                'Friday', 'Saturday', 'Sunday' ]->[$wday];

    return wantarray ? ($ts, $day) : $ts;
}

sub local_to_unix {
    my ($self, $ts) = @_;

    my ($date_str, $time_str) = split /\s+/, $ts;
    (my $date_time = $date_str) =~ s/[-:]//g;
    if ($date_time =~ /^(\d{4})(\d{2})(\d{2})/) {
        my ($year, $mon, $mday) = ($1, $2, $3);
        my ($hour, $min, $sec);

        if (defined $time_str and $time_str !~ /^\s*$/) {
            if ($time_str =~ /(\d{1,2}):(\d{1,2})(?::(\d{1,2}))?/) {
                ($hour, $min, $sec) = ($1, $2, $3);
            }
        }

        unless (defined $hour) {
            $hour = 0;
            $min = 0;
            $sec = 0;
        }
        $sec = 0 unless defined $sec;

        $mon--;
        $year -= 1900;

        return timelocal($sec, $min, $hour, $mday, $mon, $year);
    }

    return 0;
}

sub get_full_version {
    my ($self) = @_;

    my $prog = ($0 =~ m{\A.*/([^/]+)\Z})[0];

    return "$prog " . $VERSION . "\n";
}

sub self_install {
    my ($self, $prefix, $bin_dir) = @_;

    unless (defined $prefix or defined $bin_dir) {
        $bin_dir = '/usr/local/bin';
    }

    $bin_dir = "$prefix/bin" unless defined $bin_dir;

    my $perl;
    {
        no warnings 'once';
        require Config;
        $perl = $Config::Config{perlpath};
    }

    my $script = __FILE__;

    unless (-w $bin_dir) {
        print STDERR "\ndconfini: can't write to $bin_dir.  ";
        print STDERR "Maybe you need to run me as root?\n\n";
        exit 1;
    }

    my $new_path = "$bin_dir/dlockf";

    open(my $in_fh, '<', $script) or
        die "couldn't open script source '$script'";
    my $line;

    open(my $out_fh, '>', $new_path)
        or die "couldn't open output file $new_path";

    $line = <$in_fh>; # eat shebang line
    print $out_fh "#!$perl\n";

    while ($line = <$in_fh>) {
        print $out_fh $line;
    }

    close $out_fh;
    close $in_fh;

    chmod 0755, $new_path;

    print STDERR "Installed as $new_path\n";
}

########## begin option processing ##########
sub print_usage {
    print STDERR qq{\nUsage: @{[ ($0 =~ m{\A.*/([^/]+)\Z})[0] || $0 ]} options

    Options:

        [-h | --help]    # this help msg
\n};
}

sub check_options {
    my ($self, $opts, $required) = @_;

    if (not $opts or $opts->{help}) {
        $self->print_usage;
        exit 1;
    }

    my $opt_ok = 1;
    $required = [ ] unless $required;
    foreach my $key (@$required) {
        if (defined($opts->{$key})) {
            if (my $v = $opts->{$key}) {
                if (my $ref = ref($v)) {
                    if ($ref eq 'ARRAY' ) {
                        unless (@$v) {
                            $opt_ok = 0;
                            warn "missing required option '$key'
";
                        }
                    }
                }
            }
        }
        else {
            $opt_ok = 0;
            warn "missing required option '$key'\n";
        }
    }

    unless ($opt_ok) {
        $self->print_usage;
        exit 1;
    }

    return $opt_ok;
}

sub get_options {
    my ($self, $spec, $defaults) = @_;
    my %opts = $defaults ? %$defaults : ();
    $spec = [ ] unless $spec;

    my $process_opt = sub {
        my ($key, $val) = @_;

        if (scalar(@_) > 2) {
            $opts{$key}{$val} = $_[2];
        }
        else {
            if ( exists($opts{$key}) and (my $v = $opts{$key}) ) {
                if (my $ref = ref($v)) {
                    if ($ref eq 'ARRAY' ) {
                        push @{ $opts{$key} }, $val;
                        return 1;
                    }
                }
            }

            $opts{$key} = $val;
        }
    };

    my $opt_rv = Getopt::Long::GetOptions(map { ($_ => $process_opt) } @$spec);

    return $opt_rv ? \%opts : undef;
}
########## end option processing ##########
