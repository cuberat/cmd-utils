#!/usr/local/bin/perl

# Copyright (c) 2014-2015 Don Owens <don@regexguy.com>.  All rights reserved.
#
# This software is released under the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
#  * Neither the name of the author nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Temp;

our $VERSION = "0.4";

# main
{
    my $self = bless { };

    my $opts = $self->get_options([ "help|h",
                                    "infile|in-file|in|i=s",
                                    "outfile|out-file|out|o=s",
                                    "indexsep|index-sep|indexdel|index-del|is|id=s",
                                    "pairsep|pair-sep|pair-del|ps|pd=s",
                                    "labelsep|label-sep|label-del|ls|ld=s",
                                    "split=i",
                                    "sortstats|sort-stats",
                                    "sort",
                                    "summary",
                                    "test|self-test",
                                    "version|V",
                                    "self_install|self-install",
                                    "installprefix|install-prefix=s",
                                    "installbindir|install-bindir=s",
                                    "tmpdir|tmp-dir=s",
                                    "focl",
                                  ], { });

    $self->check_tests;
    if ($opts->{test}) {
        $self->run_self_test;
        exit 0;
    }

    if ($opts->{self_install}) {
        $self->self_install($opts->{installprefix}, $opts->{installbindir},
                            'dstatsagg');
        exit 0;
    }

    if ($opts->{version}) {
        print STDERR $self->get_full_version;
        exit 0;
    }

    my $required_fields = [ 'indexsep', 'pairsep', 'labelsep' ];
    $self->check_options($opts, $required_fields); # die's on bad options
    $self->{opts} = $opts;

    $self->init;

    if ($opts->{focl}) {
        if (@ARGV) {
            $self->{files} = \@ARGV;
        }
        else {
            $self->print_usage;
            exit 1;
        }
        $self->process_multi;
    }
    else {
        $self->process;
    }
}

exit 0;

###############################################################################
# Subroutines

sub get_next_file {
    my ($self) = @_;

    my $files = $self->{files};
    return unless $files;

    return unless @{$self->{files}};

    return shift @{$self->{files}};
}

sub process_multi {
    my ($self) = @_;

    my $out_fh = $self->{out_fh};
    my $opts = $self->{opts};

    my $is = $opts->{indexsep};
    my $ps = $opts->{pairsep};
    my $ls = $opts->{labelsep};

    my $is_re = qr/\Q$is\E/;
    my $ps_re = qr/\Q$ps\E/;
    my $ls_re = qr/\Q$ls\E/;

    my $data = { };

    my $file;
    while ( defined($file = $self->get_next_file) ) {
        open(my $in_fh, '<', $file)
            or die "$0: couldn't open input file '$file'";
        $self->process_one_file($in_fh, $data, $is_re, $ps_re, $ls_re);
        close $in_fh;
    }

    $self->write_aggregated($out_fh, $opts, $data);

}

sub process_one {
    my ($self, $opts, $in_fh, $out_fh) = @_;

    my $is = $opts->{indexsep};
    my $ps = $opts->{pairsep};
    my $ls = $opts->{labelsep};

    my $is_re = qr/\Q$is\E/;
    my $ps_re = qr/\Q$ps\E/;
    my $ls_re = qr/\Q$ls\E/;

    my $data = { };

    $self->process_one_file($in_fh, $data, $is_re, $ps_re, $ls_re, $out_fh);
    $self->write_aggregated($out_fh, $opts, $data);
}

sub write_aggregated {
    my ($self, $out_fh, $opts, $data) = @_;

    if ($opts->{summary}) {
        my $summary = { };
        my $count = keys %$data; # make sure iterator is reset
        while (my ($index, $d) = each %$data) {
            foreach my $k (keys %$d) {
                $summary->{$k} += $d->{$k};
            }
        }

        $self->out_summary($out_fh, $summary, $opts);

        return 1;
    }
    if ($opts->{sort}) {
        foreach my $index (sort keys %$data) {
            $self->out_one($out_fh, $index, $data->{$index}, $opts);
        }
    }
    else {
        my $count = keys %$data; # make sure iterator is reset
        while (my ($index, $d) = each %$data) {
            $self->out_one($out_fh, $index, $d, $opts);
        }
    }
}

sub out_summary {
    my ($self, $out_fh, $data, $opts) = @_;

    my $ls = $opts->{labelsep};
    my $d = $data;
    my $stats = join($opts->{pairsep},
                     map { sprintf "%s%s%s", $_, $ls, $d->{$_} } sort keys %$d);
    printf $out_fh "%s\n", $stats;

}

sub process_one_file {
    my ($self, $in_fh, $data, $is_re, $ps_re, $ls_re, $out_fh) = @_;

    my $line;
    my $split = $self->{opts}{split};
    my $count = 0;
    my $last_index = '';
    my $check_index = 0;

    if ($split) {
        $in_fh = $self->sort_file_handle($in_fh);
    }

    while ($line = <$in_fh>) {
        chomp $line;

        if ($split and $count >= $split) {
            $check_index = 1;
        }

        my ($index, $stats_str) = split $is_re, $line;
        if ($check_index) {
            unless ($index eq $last_index) {
                $self->write_aggregated($out_fh, $self->{opts}, $data);
                %$data = ();
                $check_index = 0;
                $count = 0;
            }
        }
        $last_index = $index;
        my $d = $data->{$index};
        $data->{$index} = $d = { } unless defined $d;
        foreach my $pair (split($ps_re, $stats_str)) {
            my ($k, $v) = split $ls_re, $pair;
            $d->{$k} += $v;
        }
        $count++;
    }

}

sub process {
    my ($self) = @_;

    my $opts = $self->{opts};
    my $in_fh = $self->{in_fh};
    my $out_fh = $self->{out_fh};

    $self->process_one($opts, $in_fh, $out_fh);
}

sub get_tmp_file {
    my ($self) = @_;

    my @args;
    if ($self->{opts}{tmpdir}) {
        push @args, DIR => $self->{opts}{tmpdir};
    }

    push @args, UNLINK => 1;
    push @args, TEMPLATE => "dstatsagg_XXXXXX";
    my $tmp_fh = File::Temp->new(@args);
    return wantarray ? ($tmp_fh, $tmp_fh . '') : $tmp_fh;
}

sub sort_file_handle {
    my ($self, $in_fh) = @_;

    my ($tmp_fh, $filename) = $self->get_tmp_file;
    my $sort = '/usr/bin/sort';
    my @cmd = ($sort, '-t', $self->{opts}{indexsep}, '-k', '1',
               '-o', $filename, '-');
    open(my $proc_out, '|-', @cmd)
        or die "couldn't start sort process: @cmd";
    my $buf;
    while (read($in_fh, $buf, 8192)) {
        print $proc_out $buf;
    }
    close $proc_out
        or die "Exit status $? from sort";

    return $tmp_fh;
}

sub find_exec {
    my ($self, $name) = @_;

    my $path;
    my $home_bin = (getpwuid($>))[7] . "/bin";
    for my $dir ($home_bin, '/usr/local/bin', '/usr/bin', '/bin', '/opt/bin') {
        $path = "$dir/$name";
        if (-x $path) {
            return $path;
        }
    }

    return undef;
}

sub out_one {
    my ($self, $out_fh, $index, $data, $opts) = @_;

    my $stats;
    my $ls = $opts->{labelsep};
    my $d = $data;
    if ($opts->{sortstats}) {
        $stats = join($opts->{pairsep},
                      map { sprintf "%s%s%s", $_, $ls, $d->{$_} }
                      sort keys %$d)
    }
    else {
        $stats = join($opts->{pairsep},
                      map { sprintf "%s%s%s", $_, $ls, $d->{$_} } keys %$d);
    }

    printf $out_fh "%s%s%s\n", $index, $opts->{indexsep}, $stats;
}

sub init {
    my ($self) = @_;

    my $in_fh;
    my $out_fh;
    my $opts = $self->{opts};
    if (defined $opts->{infile}) {
        open($in_fh, '<', $opts->{infile})
            or die "$0: couldn't open input file '$opts->{infile}'";
    }
    else {
        unless ($opts->{focl}) {
            $in_fh = $self->{in_fh} // *STDIN;
        }
    }

    if (defined $opts->{outfile}) {
        open($out_fh, '>', $opts->{outfile})
            or die "$0: couldn't open output file '$opts->{outfile}'";
    }
    else {
        $out_fh = $self->{out_fh} // *STDOUT;
    }

    $self->{in_fh} = $in_fh;
    $self->{out_fh} = $out_fh;

    if ($opts->{sort}) {
        $opts->{sortstats} = 1;
    }
}

sub run_tests {
    my ($self) = @_;

    eval 'use Test::More tests => 1';

    my $in_str = "";
    my $expected = "";

    $in_str = "127.0.0.1|foo:1,bar:2\n127.0.0.2|foo:3,bar:4\n127.0.0.1|foo:3,bar:5\n";
    $expected = "127.0.0.1|bar:7,foo:4\n127.0.0.2|bar:4,foo:3\n";

    $self->test_one($in_str, $expected, "2 items", '|', ',', ':');

    exit 0;
}

sub test_one {
    my ($self, $in_str, $expected, $desc, $id, $pd, $ld) = @_;

    my $out_str = '';
    open(my $in_fh, '<', \$in_str);
    open(my $out_fh, '>', \$out_str);

    my $opts = { sortstats => 1, sort => 1,
                 indexsep => $id, pairsep => $pd, labelsep => $ld,
               };

    $self->process_one($opts, $in_fh, $out_fh);

    close $in_fh;
    close $out_fh;

    is($out_str, $expected, $desc)
        or diag("id='$id', pd='$pd', ld='$ld'");
}

sub check_tests {
    my ($self) = @_;

    if ($ENV{DSTATSAGG_TEST_ACTIVE}) {
        $self->run_tests;
        exit 0;
    }
}

sub run_self_test {
    my ($self) = @_;

    if ($ENV{DSTATSAGG_TEST_ACTIVE}) {
        $self->run_tests;
        exit 0;
    }

    $ENV{DSTATSAGG_TEST_ACTIVE} = 1;

    my $perl = $self->get_perl_exec;
    my $me = __FILE__;

    (my $sf_me = $me) =~ s/'/\\'/g;
    my @cmd = ($perl, '-MTest::Harness', '-e', "runtests('$sf_me')");

    exec {$cmd[0]} @cmd;

    exit 0;

}

sub get_perl_exec {
    my $perl;
    {
        no warnings 'once';
        require Config;
        $perl = $Config::Config{perlpath};
    }

    return $perl;
}

sub self_install {
    my ($self, $prefix, $bin_dir, $prog_name) = @_;

    unless (defined $prefix or defined $bin_dir) {
        $bin_dir = '/usr/local/bin';
    }

    $bin_dir = "$prefix/bin" unless defined $bin_dir;

    my $perl;
    {
        no warnings 'once';
        require Config;
        $perl = $Config::Config{perlpath};
    }

    my $script = __FILE__;

    unless (-w $bin_dir) {
        print STDERR "\n$prog_name: can't write to $bin_dir.  ";
        print STDERR "Maybe you need to run me as root?\n\n";
        exit 1;
    }

    my $new_path = "$bin_dir/$prog_name";

    open(my $in_fh, '<', $script) or
        die "couldn't open script source '$script'";
    my $line;

    open(my $out_fh, '>', $new_path)
        or die "couldn't open output file $new_path";

    $line = <$in_fh>; # eat shebang line
    print $out_fh "#!$perl\n";

    while ($line = <$in_fh>) {
        print $out_fh $line;
    }

    close $out_fh;
    close $in_fh;

    chmod 0755, $new_path;

    print STDERR "Installed as $new_path with perl '$perl'\n";
}

sub get_full_version {
    my ($self) = @_;

    my $prog = ($0 =~ m{\A.*/([^/]+)\Z})[0];

    return "$prog " . $VERSION . "\n";
}

########## begin option processing ##########
sub print_usage {
    print STDERR qq{\nUsage: @{[ ($0 =~ m{\A.*/([^/]+)\Z})[0] || $0 ]} options

    Options:
        [-i | --in-file <file>]    # input file
        [-o | --out-file <file>]   # output file
        [--id | --index-del <del>] # index delimiter
        [--pd | --pair-del <del>]  # pair delimiter
        [--ld | label-del <del>]   # label delimiter
        [--sort-stats]             # sort stats pairs in output
        [--sort]                   # sort by index in output
        [--split <lines>]          # sort the input and split at line count,
                                   # but don't split across an index
                                   # calls the unix command-line sort
        [--summary]                # summarize the data over all index values
        [--test]                   # run self test
        [--tmp-dir <dir>]          # temp directory for sorting
        [--install-prefix <dir>]   # directory prefix for installation
        [--install-bindir <dir>]   # bin director for installation
        [--version|V]              # print out the version number
        [--focl]                   # input file names are on the cmd line
        [-h | --help]              # this help msg
\n};
}

sub check_options {
    my ($self, $opts, $required) = @_;

    if (not $opts or $opts->{help}) {
        $self->print_usage;
        exit 1;
    }

    my $opt_ok = 1;
    $required = [ ] unless $required;
    foreach my $key (@$required) {
        if (defined($opts->{$key})) {
            if (my $v = $opts->{$key}) {
                if (my $ref = ref($v)) {
                    if ($ref eq 'ARRAY' ) {
                        unless (@$v) {
                            $opt_ok = 0;
                            warn "missing required option '$key'
";
                        }
                    }
                }
            }
        }
        else {
            $opt_ok = 0;
            warn "missing required option '$key'\n";
        }
    }

    unless ($opt_ok) {
        $self->print_usage;
        exit 1;
    }

    return $opt_ok;
}

sub get_options {
    my ($self, $spec, $defaults) = @_;
    my %opts = $defaults ? %$defaults : ();
    $spec = [ ] unless $spec;

    my $process_opt = sub {
        my ($key, $val) = @_;

        if (scalar(@_) > 2) {
            $opts{$key}{$val} = $_[2];
        }
        else {
            if ( exists($opts{$key}) and (my $v = $opts{$key}) ) {
                if (my $ref = ref($v)) {
                    if ($ref eq 'ARRAY' ) {
                        push @{ $opts{$key} }, $val;
                        return 1;
                    }
                }
            }

            $opts{$key} = $val;
        }
    };

    my $opt_rv = Getopt::Long::GetOptions(map { ($_ => $process_opt) } @$spec);

    return $opt_rv ? \%opts : undef;
}
########## end option processing ##########
